---
title: "Dates and times"
---

::: {.content-visible when-profile="book"}
{{< revealjs "slides/17-dates_and_times.html" >}}
:::

## Learning objectives

-   **Create date** and **datetime** objects.
-   Work with **datetime components.**
-   Perform **arithmetic** on **timespans.**
-   Recognize ways to deal with **timezones** in R.

```{r}
#| label: dates-and-times-libraries
#| warning: false
#| message: false

library(tidyverse)
library(nycflights13)
```

## Date/time objects

3 types of date/time objects:

-   **date** = `<date>`
-   **time** = `<time>`; use {hms} üì¶
-   **datetime** = `<dttm>` = "POSIXct"

-   Always use simplest that works, but
-   Beware of timezones!

## today() and now()

```{r}
#| label: dates-and-times-now-today

today() # just the date
now() # date with timestamp
```

## datetimes and read_csv()

-   Automatic: "YYYY-MM-DD HH:MM:SS"
-   Else: specify `col_types` with `col_date()` and `col_datetime()`
    -   See ?readr::col_datetime for `format` options
    -   "%Y" = 4-digit year, "%B" = full month name, etc
    -   Specify `locale()` for non-English month names

## ymd_hms() and friends

{lubridate} functions:

-   `ymd_hms()` = "year month day hour minute second"
-   Rearrange for other options
-   Leave off `_hms` & `tz` for just date

```{r}
#| label: dates-and-times-ymd

ymd_hms("2017-01-31 20:11:59")
```

## make_date() and make_datetime()

```{r}
#| label: dates-and-times-make-datetime

flights |> 
  select(year, month, day, hour, minute) |> 
  mutate(
    departure = make_datetime(year, month, day, hour, minute),
    dep_date = make_date(year, month, day)
  )
```

## as_date() and as_datetime()

-   Most useful for offset from "Unix Epoch", 1970-01-01 00:00:00 UTC
    -   `as_date(days)`
    -   `as_datetime(seconds)`

```{r}
#| label: dates-and-times-as

as_date(365 * 10 + 2) # 2 leap years
as_datetime(10 * 60 * 60)
```

## Getting components

-   `year()`, `month()`, `hour()`, `minute()`, `second()`
-   `day()` == `mday()`, `yday()` (day of year), `wday()` (day of week)

```{r}
#| label: dates-and-times-components

datetime <- ymd_hms("2024-03-08 19:32:28")
year(datetime)
mday(datetime)
yday(datetime)
wday(datetime, label = TRUE)
```

## Rounding datetimes

```{r}
#| label: dates-and-times-rounding

round_date(datetime, unit = "hour")
floor_date(datetime, unit = "hour")
ceiling_date(datetime, unit = "hour")
```

## Updating components

```{r}
#| label: dates-and-times-updating

year(datetime) <- 2030
datetime
hour(datetime) <- hour(datetime) + 1
datetime
update(datetime, years = 2024, months = 2)
update(datetime, years = 2024, months = 2, mdays = 30)
```

## Time spans

-   **Durations** = exact number of seconds
-   **Periods** = human units (days, months, etc)
-   **Intervals** = start and end datetime

## Durations

```{r}
#| label: dates-and-times-durations

jon_age <- today() - ymd("1975-01-24")
jon_age
as.duration(jon_age)
ddays(0:3) + dhours(2)
ymd_hms("2024-03-10 01:00:00", tz = "America/Chicago") + ddays(1)
dyears(1) / ddays(1)
```

## Periods

```{r}
#| label: dates-and-times-periods

class(days(1))
ymd_hms("2024-03-10 01:00:00", tz = "America/Chicago") + ddays(1)
ymd_hms("2024-03-10 01:00:00", tz = "America/Chicago") + days(1)
```

## Intervals

```{r}
#| label: dates-and-times-intervals

y2023 <- ymd("2023-01-01") %--% ymd("2024-01-01")
y2024 <- ymd("2024-01-01") %--% ymd("2025-01-01")
y2023 / dyears(1)
y2023 / days(1)
y2024 / dyears(1)
y2024 / days(1)
```

## Time zones

```{r}
#| label: dates-and-times-timezones

club_start_chicago <- ymd_hms("2024-03-08 13:00:00", tz = "America/Chicago")
force_tz(club_start_chicago, "Europe/Rome") # Only do this to fix mistakes
with_tz(club_start_chicago, "UTC")
with_tz(club_start_chicago, "Europe/Rome")
with_tz(club_start_chicago, "Australia/Sydney")
```

## Daylight saving time

```{r}
#| label: dates-and-times-timezones-dst

club_starts <- club_start_chicago + weeks(0:5)
club_starts |> hour()
club_starts |> with_tz("Europe/Rome") |> hour()
club_starts |> with_tz("UTC") |> hour() # üò¢
club_starts |> with_tz("Australia/Sydney") |> hour() # üò¢
```

## Lord Howe Island likes bugs

![Lord Howe Island stick insect aka tree lobster](images/17-lord_howe_stick_insect.jpg)

## Lord Howe Island likes time zone bugs

Lord Howe Island changes by 30 minutes for daylight saving time

```{r}
#| label: dates-and-times-timezones-howe

club_starts |> with_tz("Australia/Sydney") |> hour()
club_starts |> with_tz("Australia/Lord_Howe") |> hour()
club_starts |> with_tz("Australia/Sydney") |> minute()
club_starts |> with_tz("Australia/Lord_Howe") |> minute()
```

## Meeting Videos

### Cohort 5

{{< video https://www.youtube.com/embed/J8QU4RBdi5c >}}

::: {.callout-tip collapse="true"}
## Meeting chat log
  
```
00:17:21	Sandra Muroy:	Hi Lucus!
00:17:52	lucus w:	Hi Sandra
00:27:34	Ryan Metcalf:	The ‚ÄúVisual Markdown Editor‚Äù icon Becki mentioned is intended to provide a similar experience to Jupyter Notebooks.
00:41:39	Federica Gazzelloni:	round_date:: https://lubridate.tidyverse.org/reference/round_date.html
00:51:22	lucus w:	Dates and time are HARD
00:51:40	Sandra Muroy:	agree!
00:52:21	Ryan Metcalf:	For a list of timezone abbreviations in R, run `OlsonNames(tzdir = NULL)`
00:53:16	Sandra Muroy:	thanks Ryan!
00:58:51	Ryan Metcalf:	I learned a trick from Federica‚Ä¶.for syntax questions, use ‚Äú?`<the character in question>`‚Äù Note the back ticks to highlight the sequence of character.
01:06:13	lucus w:	‚Äú?‚Äù -- aka ‚Äúwhat the‚Äù
01:07:42	Federica Gazzelloni:	?`%--%`
01:08:42	Federica Gazzelloni:	start %--% end
01:10:08	Becki R. (she/her):	Thanks, Federica! The easiest answer is the best.
01:10:54	lucus w:	In healthcare there‚Äôs a tendency to deidentify date time objects as it‚Äôs considered patient identified information. Masking those date time randomly is a huge challenge
01:11:19	Sandra Muroy:	interesting
01:13:57	Sandra Muroy:	happy holidays everyone!
```
:::

### Cohort 6

{{< video https://www.youtube.com/embed/URL >}}


### Cohort 7

{{< video https://www.youtube.com/embed/pGbCWFB4Rz4 >}}


### Cohort 8

{{< video https://www.youtube.com/embed/QXFhZjc9S0o >}}
